// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package samplepb

import (
	context "context"
	signatures "github.com/theNorstroem/FuroBaseSpecs/dist/pb/furo/signatures"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SamplesClient is the client API for Samples service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SamplesClient interface {
	// Creates a Sample.
	CreateSample(ctx context.Context, in *CreateSampleRequest, opts ...grpc.CallOption) (*signatures.EmptyEntity, error)
	// Delete a Sample
	DeleteSample(ctx context.Context, in *DeleteSampleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns a single Sample.
	GetSample(ctx context.Context, in *GetSampleRequest, opts ...grpc.CallOption) (*SampleEntity, error)
	// Returns a list of Samples.
	ListSamples(ctx context.Context, in *ListSamplesRequest, opts ...grpc.CallOption) (*SampleCollection, error)
	// Update an existing  Sample. PATCH is also supported
	UpdateSample(ctx context.Context, in *UpdateSampleRequest, opts ...grpc.CallOption) (*SampleEntity, error)
}

type samplesClient struct {
	cc grpc.ClientConnInterface
}

func NewSamplesClient(cc grpc.ClientConnInterface) SamplesClient {
	return &samplesClient{cc}
}

func (c *samplesClient) CreateSample(ctx context.Context, in *CreateSampleRequest, opts ...grpc.CallOption) (*signatures.EmptyEntity, error) {
	out := new(signatures.EmptyEntity)
	err := c.cc.Invoke(ctx, "/sample.Samples/CreateSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesClient) DeleteSample(ctx context.Context, in *DeleteSampleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sample.Samples/DeleteSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesClient) GetSample(ctx context.Context, in *GetSampleRequest, opts ...grpc.CallOption) (*SampleEntity, error) {
	out := new(SampleEntity)
	err := c.cc.Invoke(ctx, "/sample.Samples/GetSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesClient) ListSamples(ctx context.Context, in *ListSamplesRequest, opts ...grpc.CallOption) (*SampleCollection, error) {
	out := new(SampleCollection)
	err := c.cc.Invoke(ctx, "/sample.Samples/ListSamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesClient) UpdateSample(ctx context.Context, in *UpdateSampleRequest, opts ...grpc.CallOption) (*SampleEntity, error) {
	out := new(SampleEntity)
	err := c.cc.Invoke(ctx, "/sample.Samples/UpdateSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamplesServer is the server API for Samples service.
// All implementations must embed UnimplementedSamplesServer
// for forward compatibility
type SamplesServer interface {
	// Creates a Sample.
	CreateSample(context.Context, *CreateSampleRequest) (*signatures.EmptyEntity, error)
	// Delete a Sample
	DeleteSample(context.Context, *DeleteSampleRequest) (*emptypb.Empty, error)
	// Returns a single Sample.
	GetSample(context.Context, *GetSampleRequest) (*SampleEntity, error)
	// Returns a list of Samples.
	ListSamples(context.Context, *ListSamplesRequest) (*SampleCollection, error)
	// Update an existing  Sample. PATCH is also supported
	UpdateSample(context.Context, *UpdateSampleRequest) (*SampleEntity, error)
	mustEmbedUnimplementedSamplesServer()
}

// UnimplementedSamplesServer must be embedded to have forward compatible implementations.
type UnimplementedSamplesServer struct {
}

func (UnimplementedSamplesServer) CreateSample(context.Context, *CreateSampleRequest) (*signatures.EmptyEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSample not implemented")
}
func (UnimplementedSamplesServer) DeleteSample(context.Context, *DeleteSampleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSample not implemented")
}
func (UnimplementedSamplesServer) GetSample(context.Context, *GetSampleRequest) (*SampleEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSample not implemented")
}
func (UnimplementedSamplesServer) ListSamples(context.Context, *ListSamplesRequest) (*SampleCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSamples not implemented")
}
func (UnimplementedSamplesServer) UpdateSample(context.Context, *UpdateSampleRequest) (*SampleEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSample not implemented")
}
func (UnimplementedSamplesServer) mustEmbedUnimplementedSamplesServer() {}

// UnsafeSamplesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SamplesServer will
// result in compilation errors.
type UnsafeSamplesServer interface {
	mustEmbedUnimplementedSamplesServer()
}

func RegisterSamplesServer(s grpc.ServiceRegistrar, srv SamplesServer) {
	s.RegisterService(&Samples_ServiceDesc, srv)
}

func _Samples_CreateSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServer).CreateSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.Samples/CreateSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServer).CreateSample(ctx, req.(*CreateSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samples_DeleteSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServer).DeleteSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.Samples/DeleteSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServer).DeleteSample(ctx, req.(*DeleteSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samples_GetSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServer).GetSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.Samples/GetSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServer).GetSample(ctx, req.(*GetSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samples_ListSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServer).ListSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.Samples/ListSamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServer).ListSamples(ctx, req.(*ListSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samples_UpdateSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServer).UpdateSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.Samples/UpdateSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServer).UpdateSample(ctx, req.(*UpdateSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Samples_ServiceDesc is the grpc.ServiceDesc for Samples service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Samples_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.Samples",
	HandlerType: (*SamplesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSample",
			Handler:    _Samples_CreateSample_Handler,
		},
		{
			MethodName: "DeleteSample",
			Handler:    _Samples_DeleteSample_Handler,
		},
		{
			MethodName: "GetSample",
			Handler:    _Samples_GetSample_Handler,
		},
		{
			MethodName: "ListSamples",
			Handler:    _Samples_ListSamples_Handler,
		},
		{
			MethodName: "UpdateSample",
			Handler:    _Samples_UpdateSample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample/sampleservice.proto",
}
